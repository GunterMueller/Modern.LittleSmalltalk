*
* Little Smalltalk, version 3
* Written by Tim Budd, Oregon State University, July 1988
*
*  methods for the unix front end - single process version
*
*
Methods Class
	addMethod	| m |
		m <- Method new; text: ''.
		(self doEdit: m)
			ifTrue: [ methods at: m name put: m ]
|
	doEdit: method
		" edit a method until it compiles correctly "
		[ method text: method text edit.
		  (method compileWithClass: self)
			ifTrue: [ ^ true ]
			ifFalse: [ Smalltalk inquire: 'edit again (yn) ? ' ]
				] whileTrue.
		^ false
|
	display
		('Class name: ', name asString)  print.
		(superClass notNil)
			ifTrue: [ ('Superclass: ', superClass ) print ].
		'Instance Variables:' print.
		variables isNil
			ifTrue: [ 'no instance variables ' print ]
			ifFalse: [ variables display ].
		'Subclasses: ' print.
		self subClasses display
|
	editMethod: methodName	| m |
		m <- self methodNamed: methodName.
		(m notNil)
			ifTrue: [ self doEdit: m ]
			ifFalse: [ superClass notNil
				    ifTrue: [ superClass editMethod: methodName ]
				    ifFalse: [ 'no such method' print ] ]
|
	readInstanceVariables
		self variables:
			((Smalltalk getPrompt: 'Instance Variables? ')
			words: [:x | x isAlphabetic ])
|
	readMethods
		[ Smalltalk inquire: 'Add a method (yn) ? ' ]
			whileTrue: [ self addMethod ]
|
	viewMethod: methodName	| m |
		m <- self methodNamed: methodName.
		(m notNil) 
			ifTrue: [ m signature print.  m text print ]
			ifFalse: [ 'no such method' print ]
]
Methods SystemDictionary
	getPrompt: aString
		Stdout printNoReturn: aString.
		^ Stdin getString
|
	inquire: aString	| response |
		response <- self getPrompt: aString.
		response isNil
			ifTrue: [ ^ false ].
		^ 'Yy' includes: (response at: 1 ifAbsent: [])
|
	echo
		" enable - disable echo input "
		EchoInput <- EchoInput not
]
Methods String
	edit	| file text |
		file <- File new; 
			scratchFile;
			open: 'w';
			print: self;
			close.
		(Editor, ' ', file name) unixCommand.
		file open: 'r'.
		text <- file asString.
		file close; delete.
		^ text
|
	print
		Stdout print: self
]
*
* initialization code
* this is executed once, by the initial image maker
*
*
Methods SystemDictionary
	error: aString
		" print a message, and remove current process "
		Stderr print: aString.
		Scheduler currentProcess; trace; terminate.
]
Methods Scheduler
	initialize	| string |
		<! 2 !>.
		string <- Smalltalk getPrompt: '>	'.
		string isNil
			ifTrue: [ notdone <- false ]
			ifFalse: [ (string size > 0)
				ifTrue: [ 
					EchoInput ifTrue:
						[ string print ].
					[ string value print ] fork ] ]
]
Methods UndefinedObject
	createGlobals	| aBlock |
		" create global variables in initial image "
		Files <- Array new: 15.
		Stdin <- File new; name: 'stdin'; mode: 'r'; open.
		Stdout <- File new; name: 'stdout'; mode: 'w'; open.
		Stderr <- File new; name: 'stderr'; mode: 'w'; open.
		Editor <- 'vi'.
		" create a dictionary of classes "
		Classes <- Dictionary new.
		Smalltalk binaryDo: [:x :y | 
			(y class == Class)
				ifTrue: [ Classes at: x put: y ] ].
		Scheduler <- Scheduler new.
		" create the initial system process "
		" note the delayed recursive call "
		aBlock <- [ Files do: [:f | f notNil ifTrue: [ f open ]].
				   SystemProcess <- aBlock newProcess.
				   EchoInput <- false.
				   Scheduler run ].
		SystemProcess <- aBlock newProcess.
|
	initialize
		" initialize the initial object image "
		self createGlobals.
		File new;
			name: 'systemImage';
			open: 'w';
			saveImage;
			close.
]
